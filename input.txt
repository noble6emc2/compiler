const int _maxn = 100;
const int z = 6;

const int char_ascii_s = 35, char_ascii_e = 126;
const char first_alpha = 'a', last_alpha = 'z';
const char underscore = '_';

int n, fib_memoize[101], res;
int choice;
int round;
char ch;

void print_fib_res(int n, int val){
 if(val != -1){
  printf("The ", n);
  printf("th fib_num is ");
  printf(val);
 }
}

int fib(int n){
 if(1 > n){
  printf("num is too small");
  return (-1);
 }
 if(n < 3) return (1);
 if(n >= 101){
  printf("num is too large");
  return (-1);
 }
 if(fib_memoize[n] == 0){
  fib_memoize[n] = fib(n - 1) + fib(n - 2);
 }
 
 return (fib_memoize[n]);
}

void init_fib_memoize(){
 int i;
 
 i = 0;
 do
 {
  fib_memoize[i] = 0;
  i = i + 1;
 }
 while(i <= 101)
 fib_memoize[1] = 1;
 fib_memoize[2] = 1;
}

char get_char(int i){
 char ch_array[4], ch;
 
 ch = 'a';
 ch_array[0] = ch;
 ch_array[1] = 'A';
 ch_array[2] = 'z';
 ch_array[3] = 'Z';
 return (ch_array[i]);
}

void test_expression(int n){
 const int _maxn = 1;
 int a;
 
 if(fib_memoize[n] == 0) return ;
 printf(" | ");
 printf(fib_memoize[('b' - 'a') * 2 - 1] + fib_memoize[_maxn + 1] - fib_memoize[3] + fib_memoize[9] / ((get_char(2) - get_char(0) - fib_memoize[8]) / 2) - 17);
 printf(" | ");
 
 a = +_maxn;
 printf(a);
 printf(" | ");
 a = -('a' - 'b')*('a' - 'c');
 printf(a);
 printf(" | ");
}

void test_string(){
 printf(" | ");
 printf(" !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
 printf(" | ");
}

void test_const_definition(){
 printf(" | ");
 printf("The first_alpha is ", first_alpha);
 printf(" The last_alpha is ", last_alpha);
 printf(" supported char ascii : 32_33 ", char_ascii_s);
 printf(underscore);
 printf(char_ascii_e);
 printf(" | ");
}

void test_scanf(){
 char ch;
 char space;
 int mark;
 
 scanf(mark, space, ch);
 printf("mark : ", mark);
 switch(ch){
  case '*' : {printf(" is asterisk | "); return;}
 }
 printf(" not asterisk | ");
}

int test_embedding(int a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8, int j, char a9, int a10, int a11){
 int array[11], sum, tmp;
 
 do{
  if(j >= 11) j = j - (j / 11) * 11;
  switch(j){
   case 1 : {
    a2 = a2 * 2;
    array[j] = a2;
   }
   case 0 : {
    tmp = (a1 * 1) + ((a2 * 2) + ((a3 * 3) * (a4 * 7) - a5 * 14 / 2  + a6 + 3 * a7 * test_embedding(a2, a3, a4, a5, a6, a7, a1, a9, j + 2, a8, a11, a11)) * (a8 - 5)) * 2;
    printf(" | tmp : ", tmp);
    array[j] = a1;
    sum = 0;
    do{
     if(j == 10){
      sum = array[j] + sum;
     }
     if(j < 10) sum = array[j + 1] + sum + array[j];
     j = j + 2;
    }while(j < 11)
    printf(" | sum : ", sum);
    printf(" | ");
    return ((a9 + a8) * (a3 + a4));
   }
   case 2 : {
    a3 = a3 * 3;
    array[j] = a3;
   }
   case 3 : {
    a4 = a4 * 4;
    array[j] = a4;
   }
   case 5 : {
    a6 = a6 * 6;
    array[j] = a6;
   }
   case 6 : {
    a7 = a7 * 7;
    array[j] = a7;
   }
   case 4 : {
    a5 = a5 * 5;
    array[j] = a5;
   }
   case 8 : {
    if(a10 == a11){
     return ((a1 + a2) * (a3 + a4));
    }
    array[j] = a9 * 9;
   }
   case 7 : {;
    array[j] = a8 * 8;
   }
   case 9 : {
    a10 = a10 * 10;
    array[j] = a10;
   }
   case 10 : {
    a11 = a11 * 11;
    array[j] = a11;
   }
  }
  j = j + 3;
 }while(1)
}

void test_dag(){
 int a[10];
 int b[10];
 int c[10];
 int i;
 int j;
 int k;
 i = 0;
 j = 2;
 do
 {
  a[i] = 0;
  b[i] = 0;
  c[i] = 0;
  i = i + 1;
 }while(i < 10)
 if(i > j){
  i = 2;
  j = 3;
 }
 a[i] = 10;
 b[i] = 10;
 c[i] = 10;
 a[j] = 11;
 c[j] = 11;
 b[j] = 11;
 k = i + 1;
 a[k] = 10;
 b[k] = 10;
 c[k] = 10;
 if(i < j){
  i = 3;
 }
 a[j] = 11;
 k = a[0];
 k = k + a[1];
 k = k + a[2];
 k = k + a[3];
 k = k + a[4];
 k = k + a[5];
 a[i] = 10;
 j = a[0] + b[0];
 j = a[1] + b[1];
 j = a[2] + b[2];
 j = a[3] + b[3];
 j = a[4] + b[4];
 printf(" | ", k);
 printf(" | ");
 printf(j);
 printf(" | ", c[2]);
 printf(" | ", c[3]);
}

void main(){
 int a,lab0;
 ch = 'm';
 init_fib_memoize();
 round = 9;
 printf(" | ");
 printf("1 : fib   2 : test_expression  -3 : test_const_definition");
 printf(" | ");
 lab0=0;
 do{
  scanf(choice);
  switch(choice){
   case 1 : {
    printf(" | ");
    printf("input n ");
    scanf(n);
    print_fib_res(n, fib(n));
    printf(" | ");
   }
   case +2 : {
    test_expression(9);
   }
   case -3 : test_const_definition();
  }
  round = round - 1;
 }while(round)
 {}{{}};;
 test_string();
 test_scanf();
 test_scanf();
 printf(" | test_embedding : ", test_embedding(1, 2, 3, 4, 5, 6, 7, 'e', 3, 'a', 10, 11));
 test_dag();
 printf(" | The char should be 'm':");
 printf(ch);
}